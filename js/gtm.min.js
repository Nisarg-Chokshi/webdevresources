var velocity, direction, apiUrl = "https://ds-contentsquare.home.ubix.io/api/real-time-collect", INITIAL_WAIT = 3e3, INTERVAL_WAIT = 1e4, ONE_SECOND = 1e3; let scriptParams = document.getElementsByTagName("script"); scriptParams = scriptParams[scriptParams.length - 1], console.log(scriptParams.getAttribute("t")); var events = ["mouseup", "keydown", "scroll", "mousemove", "mouseleave", "error", "click", "paste", "load", "touchstart", "touchend", "touchmove", "mouseover"], startTime = Date.now(), endTime = startTime + INITIAL_WAIT, totalTime = 0, total_click_count = 0, rage_click_count = 0, consecutive_click_count = 0, excessive_click_count = 0, bottom_page_visit_count = 0, total_paste = 0, total_reloads = 0, lastMouseX = null, lastMouseY = null, interval = 350, threshold = .01, directionChangeCount = 0, distance = 0, pageTitle = "", pageLoadTime = 0, fist_contentful_paint = 0, initialZoomDistance = null, xpath = "", hoverCounts = { buttons: 0, links: 0, input: 0 }, RAGE_CLICK_THRESHOLD = 750, CONSECUTIVE_THRESHOLD = 5e3, EXCESSIVE_THRESHOLD = 1e4, RAGE_CLICK_LIMIT = 4, CONSECUTIVE_CLICK_LIMIT = 5, EXCESSIVE_CLICK_LIMIT = 10, PASTE_LIMIT = 2, RELOAD_LIMIT = 2, SHAKE_THRESHOLD = 50, ZOOM_THRESHOLD = 50, clickTimestamp = [], rage_counter = 0, consecutive_counter = 0, scroll_counter = 0, pageUrl = window.location.href, timezone = Intl.DateTimeFormat().resolvedOptions().timeZone, screenHeight = window.screen.availHeight, screenWidth = window.screen.availWidth, os_version = window.navigator.platform, browser_full_version = parseFloat(window.navigator.appVersion), browser_major_version = parseInt(navigator.appVersion), screenOrientation = screen.orientation.type, mobileKeywords = ["mobile", "android", "iphone", "ipod", "ipad", "windows phone"], userAgent = navigator.userAgent.toLowerCase(), isMobile = mobileKeywords.some(function (e) { userAgent.includes(e) }), deviceType = isMobile ? "Mobile" : "Desktop", device_fingerprint = ""; function getBrowserName() { var e, t = navigator.userAgent; return t.match(/chrome|chromium|crios/i) ? "chrome" : t.match(/firefox|fxios/i) ? "firefox" : t.match(/safari/i) ? "safari" : t.match(/opr\//i) ? "opera" : t.match(/edg/i) ? "edge" : "unknown" } function sendSignalData(e) { try { var t = { event: e, url: pageUrl, timeZone: timezone, fingerprint: device_fingerprint, userTimeStamp: new Date().getTime(), screenHeight: screenHeight, screenWidth: screenWidth, os_version: os_version, browser: getBrowserName(), browser_full_version: browser_full_version, browser_major_version: browser_major_version, screenOrientation: screenOrientation, deviceType: deviceType, source: window.location.hostname, referrer: "" !== document.referrer & window.location.href !== document.referrer ? document.referrer : "", pageTitle: pageTitle, pageLoadTime: "excessive_reloads" === e ? pageLoadTime : 0, fisrtPaint: "excessive_reloads" === e ? fist_contentful_paint : 0, xpath: e.includes("click") || e.includes("hover") ? xpath : "" }, n = { tableName: tableName, data: [t], clientInfo: { appKey: "dataSpace", accessToken: "dataSpace@ubix.com", timeStamp: new Date().getTime() } }; console.log("Sending signal...", e, n), fetch(apiUrl, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(n) }).then(function (e) { console.log("Signal submitted!", e), console.log(e.json()) }).catch(function (e) { console.log("Error", e) }) } catch (i) { console.log(i) } } function formatTime(e) { return Math.floor(e / 1e3) } function generateDeviceFingerprint() { var e, t = navigator.userAgent, n = navigator.language, i = window.screen.colorDepth, r = navigator.deviceMemory, a = navigator.hardwareConcurrency, o = getPlugins(), s = generateCanvasFingerprint(); return sha256(t + n + i + r + a + os_version + o + s + generateWebGLFingerprint()) } function getPlugins() { for (var e = [], t = 0; t < navigator.plugins.length; t++)e.push(navigator.plugins[t].name); return e.join(",") } function generateCanvasFingerprint() { var e = document.createElement("canvas"), t = e.getContext("webgl") || e.getContext("experimental-webgl"); if (!t) return ""; var n = t.getExtension("WEBGL_debug_renderer_info"), i = n ? t.getParameter(n.UNMASKED_RENDERER_WEBGL) : ""; return t.getParameter(t.VENDOR) + "~" + t.getParameter(t.RENDERER) + "~" + i } function generateWebGLFingerprint() { var e = document.createElement("canvas"), t = e.getContext("webgl") || e.getContext("experimental-webgl"); return t ? t.getExtension("WEBGL_debug_renderer_info") ? t.getParameter(t.getExtension("WEBGL_debug_renderer_info").UNMASKED_VENDOR_WEBGL) : "" : "" } function sha256(e) { var t = new TextEncoder().encode(e); return crypto.subtle.digest("SHA-256", t).then(function (e) { return hex(e) }) } function hex(e) { for (var t = [], n = new DataView(e), i = 0; i < n.byteLength; i += 4) { var r = n.getUint32(i).toString(16), a = "00000000", o = (a + r).slice(-a.length); t.push(o) } return t.join("") } function distanceBetweenTouches(e, t) { var n = t.clientX - e.clientX, i = t.clientY - e.clientY; return Math.sqrt(n * n + i * i) } generateDeviceFingerprint().then(function (e) { device_fingerprint = e }), events.forEach(function (e) { window.addEventListener(e, function (t) { if ("click" == e) { total_click_count++, rage_counter++, consecutive_counter++; var n = new Date().getTime(); clickTimestamp.push(n), rage_counter >= RAGE_CLICK_LIMIT && clickTimestamp[RAGE_CLICK_LIMIT - 1] - clickTimestamp[0] < RAGE_CLICK_THRESHOLD && (rage_click_count++, rage_counter = 0, xpath = getXPath(t.target), sendSignalData("frustrated_click")), consecutive_counter >= CONSECUTIVE_CLICK_LIMIT && clickTimestamp[CONSECUTIVE_CLICK_LIMIT - 1] - clickTimestamp[0] < CONSECUTIVE_THRESHOLD && (consecutive_click_count++, consecutive_counter = 0, xpath = getXPath(t.target), sendSignalData("consecutive_click")), clickTimestamp.length === EXCESSIVE_CLICK_LIMIT && clickTimestamp[EXCESSIVE_CLICK_LIMIT - 1] - clickTimestamp[0] < EXCESSIVE_THRESHOLD && (excessive_click_count++, clickTimestamp = [], xpath = getXPath(t.target), sendSignalData("excessive_clicks")), clickTimestamp.length === EXCESSIVE_CLICK_LIMIT && (clickTimestamp = []) } if ("load" === e && (console.log("reloading..."), window.performance.getEntriesByName("first-contentful-paint").length > 0 && (fist_contentful_paint = window.performance.getEntriesByName("first-contentful-paint")[0].startTime), "reload" === window.performance.getEntriesByType("navigation")[0].type && (pageLoadTime = window.performance.timing.domComplete - window.performance.timing.navigationStart, sendSignalData("excessive_reloads"))), "scroll" === e && window.innerHeight + window.scrollY >= document.body.scrollHeight && ++bottom_page_visit_count > 2 && (bottom_page_visit_count = 0, scroll_counter++, sendSignalData("repeated_scrolling")), "error" === e && sendSignalData("js_error"), "paste" === e && ++total_paste > PASTE_LIMIT && sendSignalData("excessive_pastes"), "mousemove" === e) { var i = Math.sign(t.movementX); distance += Math.abs(t.movementX) + Math.abs(t.movementY), i !== direction && (direction = i, directionChangeCount++) } if ("touchstart" === e && 2 === t.touches.length) { var r = t.touches[0], a = t.touches[1]; initialZoomDistance = distanceBetweenTouches(r, a) } if ("touchend" === e && (initialZoomDistance = null), "touchmove" === e && 2 === t.touches.length && null !== initialZoomDistance) { var r = t.touches[0], a = t.touches[1]; Math.abs(distanceBetweenTouches(r, a) - initialZoomDistance) > ZOOM_THRESHOLD && (sendSignalData("pinch_and_zoom"), initialZoomDistance = null) } if ("mouseover" === e) { var o = t.target.tagName.toLowerCase(); "button" == o && (hoverCounts.buttons++, hoverCounts.buttons > 2 && (xpath = getXPath(t.target), hoverCounts.buttons = 0, sendSignalData("repetitive_hovering"))), "a" === o && (hoverCounts.links++, hoverCounts.links > 2 && (xpath = getXPath(t.target), hoverCounts.links = 0, sendSignalData("repetitive_hovering"))), "input" === o && (hoverCounts.input++, hoverCounts.input > 2 && (xpath = getXPath(t.target), hoverCounts.input = 0, sendSignalData("repetitive_hovering"))) } }) }); var intervalClear = setInterval(function () { var e = distance / interval; if (!velocity) { velocity = e; return } var t = (e - velocity) / interval; directionChangeCount && t > threshold && sendSignalData("mouse_shakes"), distance = 0, directionChangeCount = 0, velocity = e }, interval); function getXPath(e) { if (!e || !e.parentNode) return ""; var t = getXPath(e.parentNode) + "/" + e.tagName.toLowerCase(), n = getChildIndex(e); return n > 1 && (t += "[" + n + "]"), t } function getChildIndex(e) { for (var t = 1, n = e.previousElementSibling; n;)n.tagName === e.tagName && t++, n = n.previousElementSibling; return t }